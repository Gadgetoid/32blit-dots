# Build Github Action, to run a test build on all targets
# (Linux, Blit, MacOS, Visual Studio) when the project is checked in.
#
# Thanks in large part to the phenomenal examples of DaftFreak.

name: Build

on:
  push:
    branches:
      - '**' # only run on branches
  pull_request:
  release:
    types: [created]

env:
  BUILD_TYPE: Release

jobs:

  build:

    name: ${{matrix.name}}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            name: MiyooMiniPlus
            release-suffix: MIYOO-MINI
            cmake-args: -DSDL2_DIR=$GITHUB_WORKSPACE/sdl/install/lib/cmake/SDL2 -D32BLIT_DIR=$GITHUB_WORKSPACE/32blit-sdk -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/main/miyoo-mini-plus.toolchain
            apt-packages: libsdl2-dev libsdl2-image-dev libsdl2-net-dev python3-setuptools

    runs-on: ${{matrix.os}}

    env:
      RELEASE_FILE: ${{github.event.repository.name}}-${{github.event.release.tag_name}}-${{matrix.release-suffix}}

    steps:
    # Check out the main repo
    - name: Checkout
      uses: actions/checkout@v2
      with:
        path: main

    # Check out the 32Blit API we build against
    - name: Checkout 32Blit API
      uses: actions/checkout@v2
      with:
        repository: 32blit/32blit-sdk
        path: 32blit-sdk

    # Linux dependencies
    - name: Install Linux deps
      run: |
        sudo apt update && sudo apt install ${{matrix.apt-packages}}
        pip3 install 32blit

    - name: Fetch Miyoo Toolchain
      working-directory: ${{runner.workspace}}
      run: |
        wget https://developer.arm.com/-/media/Files/downloads/gnu-a/8.3-2019.03/binrel/gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf.tar.xz
        tar -xf gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf.tar.xz
        echo `pwd`/gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf/bin > $GITHUB_PATH

    - name: Checkout SDL Source
      uses: actions/checkout@v2
      with:
        repository: gadgetoid/steward-fu-sdl
        ref: mmiyoo/joystick
        path: sdl

    - name: Build SDL
      shell: bash
      working-directory: ${{runner.workspace}}/32blit-dots/sdl
      run: |
        export CROSS_COMPILE=arm-linux-gnueabihf-
        ./ci/build.sh

    # Set up the cmake build environment
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/main/build

    # Ask cmake to build the makefiles
    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/main/build
      run: ${{matrix.cmake-prefix}} cmake $GITHUB_WORKSPACE/main -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCPACK_PACKAGE_FILE_NAME=${{env.RELEASE_FILE}} ${{matrix.cmake-args}}

    # And then run the build itself
    - name: Build
      working-directory: ${{runner.workspace}}/main/build
      shell: bash
      run: |
        cmake --build . --config $BUILD_TYPE -j 2

    # When it's a release, generate tar/zip files of the build
    - name: Package Release
      if: github.event_name == 'release' && matrix.release-suffix != ''
      shell: bash
      working-directory: ${{runner.workspace}}/main/build
      run: |
        cmake --build . --config $BUILD_TYPE --target package

    # Push the tar file to the release
    - name: Upload tar
      if: github.event_name == 'release' && matrix.release-suffix != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        asset_path: ${{runner.workspace}}/main/build/${{env.RELEASE_FILE}}.tar.gz
        upload_url: ${{github.event.release.upload_url}}
        asset_name: ${{env.RELEASE_FILE}}.tar.gz
        asset_content_type: application/octet-stream

    # Push the zip file to the release
    - name: Upload zip
      if: github.event_name == 'release' && matrix.release-suffix != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        asset_path: ${{runner.workspace}}/main/build/${{env.RELEASE_FILE}}.zip
        upload_url: ${{github.event.release.upload_url}}
        asset_name: ${{env.RELEASE_FILE}}.zip
        asset_content_type: application/zip
